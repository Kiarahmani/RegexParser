Medium:

* character escapes

- quantifiers

- alternation

- handle errors in the pattern string

- implement the explicit DFA algorithm

- implement the backtracking algorithm



Small:

- zero-width patterns (for example, "b*" matched against "bbbcc" should return [(0, 3, "bbb"), (3, 0, ""), (4, 0, ""), (5, 0, "")])

- character class subtraction (e.g., "[a-z-[m-p]]", or "[a-z-[d-w-[m-o]]]")

- improve performance of class CharClassPattern


- alternation

- non-greedy quantifiers

- switch to Visual Studio 2010 (Express) and .NET Framework 4.0; use covariance/contravariance for the Parser delegate

- two types of behavior: canonical and ECMAScript (JavaScript); for example, \w is equivalent to [\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Pc}\p{Lm}] in canonical mode, and to [a-zA-Z_0-9] in ECMAScript mode; ECMAScript mode does NOT support Unicode, and language elements such as the Unicode category or block elements \p and \P; the Microsoft library has a RegexOptions.ECMAScript flag, and in its absence the default behavior is canonical

- support Unicode categories (e.g., "\p{Lu}" for Letter, Uppercase)

- support Unicode named blocks (e.g., "\p{IsBasicLatin}" for the range 0000 - 007F)


* accept ']' as the first character in a character group: "[]]"
* test with a char range class pattern inside another one (e.g., @"[[\s]\d]") (or at least it looks that way, even though it's not really interpreted as such)
* character classes (such as \s, \w, \d) inside a character group (e.g., [abA-Z\d]); also, character escapes (e.g., [\t\u007c]); in fact, parsers CharEscapes and CharClass should be unified
* escape the dash ('-') inside a character class (e.g., "[a-zA\-Z]" should match only the dash in "BC-DEF")
* rename class CharPattern to CharEscapePattern (like the parser in PatternParsers)
* make classes CharPattern (or CharEscapePattern) and CharClassPattern descend from a common class (CharPattern?); this will be the only class to be 'asked' by MatcherPatterns if a char satisfies it (virtual method: IsMatch)
* {n, m} quantifier
* add new method to class RegexAssert: ThrowsSameExceptionAsMsoft
* test with a real newline ("\n") inside a pattern; also, with a verbatim string literal (@"...") that spans two or more lines (as the pattern)
* remove equality operator (==) overloading from classes CharClassPattern and CharRange [maybe also the IEquatable<T> interface and GetHashCode overrides, from all classes]
* move CharSubgroup classes from PatternParsers.CharClassPattern to class CharClassPattern (and eliminate the 'let' subexpressions from the pattern definition)
* RegexAssert methods: write output to the console (input, pattern, matches)
* do not sort the CharSet and CharRanges array of the CharClassPattern (let the user optimize for speed by choosing the right character order, from most frequent to least frequent in the input)
*oRename Matcher classes to Parser.

- a parser should be generic (type-wise) on the determinism/non-determinism of the result, similar to Haskell’s Maybe and List monads, respectively. This is needed because the pattern (the regex language) will be parsed deterministically, whereas the input string, non-deterministically.



Error handling:

- throw error for nested quantifiers (e.g., "(ab)++"); (no error when the inner quantifier is enclosed in a group, even though semantically it's the same: "((ab)+)+";) see also failing NUnit test

- throw error if \x, \u, or \<octal> have too few digits

- throw error for any 'unknown' character after backslash, both in the CharEscapes and the CharClass parsers (including '_')

- throw error for "[x-y] range in reverse order" (e.g., "[c-a]")

- throw error for the empty character group: "[]"

- deal with spaces within a {n,m} quantifier (no error thrown, but no match either)



Big:

- Build a parse tree for the pattern (lexical and syntactic analysis).

- For the backtracking algorithm (like the .NET Framework's): build an input string matcher capabable of bactracking.

-~For the explicit/implicit DFA algorithms: build a state machine.
-~For the explicit DFA algorithm: transform the NFA state machine into a DFA one (powerset construction).



Features:

- basic language elements (no backtracking): ordinary chars, char escapes, quantifiers, char classes, alternation constructs, anchors, comments, non-capturing grouping

- non-greedy quantification

- captures and capturing groups

- substitutions

- backreferences

- non-ASCII (Unicode) encodings
