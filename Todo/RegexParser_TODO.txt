RegexParser TODO:

- add RegexOptions.RightToLeft

- PatternParsers: remove Anchor from Quantifier

- RegexParsers: "unify" all group patterns that are part of various patterns (alternation, quantifier, etc.) (groups are similar, except for each excluding their own parent pattern); use Lazy() for all patterns in a group

- (Base)ASTTransform: when calculating GroupPattern.Patterns, QuantifierPattern.ChildPattern, AlternationPattern.Alternation, filter out all children that are 'null', or empty GroupPatterns; if the pattern that should dissapear is a CharPattern, return 'null'; if a QuantifierPattern, return an empty GroupPattern

- implement composability of ASTTransforms (both parallel and serial); define *fluent* interface (mini-DSL) for composability

- display pattern in multi-line indented format (with level of indent depending on element depth within the tree)

- implement lookbehind by using RegexOptions.RightToLeft and method Regex.Match(String, Int32) (with a '\G' anchor at the right)

[- Alternation: (A|B|C) => put A on the call stack, and (B|C) on the backtrack stack (instead of C and B separately, in that order, on the backtrack stack)]

[- create subtype of StackFrame (QuantifierStackFrame) that deals with QuantifierPatterns (methods: Next, BacktrackNext)]

- replace the use of 'string' in Result<char, string> with an immutable class which stores all 'Value' chars in a tree structure (with cheap 'append', and branch re-use); maybe revive the idea of a non-deterministic parser (as in the 'experimental' Git branch) (Value is not a single string/char tree, but a list of them, possibly empty); replace the current implementation of backtracking


* is there a way to run an *action* for every match? (like Replace(), but running the action instead of the substitution pattern)
* turn all asserts on/off through a preprocessor symbol (ENABLE_ASSERT)
* create enum 'PatternType' (Group, Quantifier, Alternation, String, Char); use this instead of testing the pattern type with the 'is' keyword; this *may* improve performance; it can also be used in ASTTransforms
* in BacktrackingMatcher.Parse, "traverse" the input IConsList<char> with a char counter (build the output string by counting matching chars, then at the end take that many from the input), instead of building a new Result<char, SimpleConsList<char>> at every step

*(o) Match2 should be initialized with Index and Length; Value should be computed only upon request (DON'T calculate the result string at the end of BacktrackingMatcher.Parse())
*(o) change classes StackFrame and BacktrackPoint into structs
